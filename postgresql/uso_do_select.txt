SELECT numero, nome FROM banco;
SELECT numero, banco FROM banco;

SELECT numero, nome FROM agencia;
SELECT banco_numero, nome FROM agencia;
SELECT numero, nome, email FROM cliente;
SELECT id, nome FROM tipo_transacao;

SELECT banco_numero, agencia_numero, numero, cliente_numero FROM conta_corrente;
SELECT banco_numero, agencia_numero, cliente_numero FROM cliente_transacoes;

SELECT * FROM cliente_transacoes;

CREATE TABLE IF NOT EXISTS teste(
	id SERIAL PRIMARY KEY,
	nome VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS teste;

CREATE TABLE IF NOT EXISTS teste(
	cpf VARCHAR(11) NOT NULL,
	nome VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (cpf)
);

INSERT INTO teste (cpf, nome)
VALUES ('01234567890', 'josé teste');


INSERT INTO teste (cpf, nome)
VALUES ('01234567890', 'josé teste') ON CONFLICT cpf DO NOTHING;

UPDATE teste SET nome = 'josé testao' WHERE cpf = '01234567890';

SELECT * FROM teste;

SELECT * FROM information_schema.columns WHERE table_name = 'banco';
SELECT column_name FROM information_schema.columns WHERE table_name = 'banco';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'banco';

SELECT * FROM cliente_transacoes;

SELECT AVG(valor) FROM cliente_transacoes;
SELECT AVG(valor) FROM cliente_transacoes WHERE email ILIKE '%gmail.com';

SELECT * FROM information_schema.columns WHERE table_name = 'cliente_transacoes';

SELECT AVG(valor) FROM cliente_transacoes WHERE banco_numero = 1;

SELECT COUNT(numero) FROM cliente;

SELECT COUNT(numero), email 
FROM cliente 
WHERE email ILIKE '%gmail.com'
GROUP BY email;

SELECT COUNT(numero), email 
FROM cliente 
WHERE email ILIKE '%gmail.com'
-- para poder realizar essa operação precisamos agrupar os dados 
GROUP BY nome;

SELECT COUNT(numero), email 
FROM cliente 
WHERE email ILIKE '%gmail.com'
-- para poder realizar essa operação precisamos agrupar os dados 
GROUP BY numero;

SELECT MAX(numero)
FROM cliente;

SELECT MAX(valor)
FROM cliente_transacoes;

SELECT MAX(valor), tipo_transacao_id
FROM cliente_transacoes
-- para fazer isso precisamos agrupar, pois o max é uma função de agrupamento
GROUP BY tipo_transacao_id;

SELECT MIN(valor)
FROM cliente_transacoes;

SELECT MIN(valor), tipo_transacao_id
FROM cliente_transacoes
-- para fazer isso precisamos agrupar, pois o max é uma função de agrupamento
GROUP BY tipo_transacao_id;

SELECT SUM(valor)
FROM cliente_transacoes;

SELECT SUM(valor), tipo_transacao_id
FROM cliente_transacoes
-- para fazer isso precisamos agrupar, pois o max é uma função de agrupamento
GROUP BY tipo_transacao_id
ORDER BY tipo_transacao_id;

SELECT COUNT(id), tipo_transacao_id
FROM cliente_transacoes
GROUP BY tipo_transacao_id;

SELECT COUNT(id), tipo_transacao_id
FROM cliente_transacoes
GROUP BY tipo_transacao_id
-- fará a contagem, mas só retorna quando a contagem for maior que 150
HAVING COUNT(id) > 150;




